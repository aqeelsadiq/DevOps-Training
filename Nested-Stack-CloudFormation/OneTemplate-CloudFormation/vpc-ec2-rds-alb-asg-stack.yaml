AWSTemplateFormatVersion: 2010-09-09

Description: This template creates vpc with public and private subnets

# Parameters are used to to build flexible CloudFormation templates
Parameters:
  VpcCIDR:
    Default: 10.0.0.0/16
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String

  PublicSubnet1CIDR:
    Default: 10.0.1.0/24
    Description: Please enter the IP range (CIDR notation) for the public subnet 1
    Type: String

  PublicSubnet2CIDR:
    Default: 10.0.2.0/24
    Description: Please enter the IP range (CIDR notation) for the public subnet 2
    Type: String

  PrivateSubnet1CIDR:
    Default: 10.0.3.0/24
    Description: Please enter the IP range (CIDR notation) for the private subnet 1
    Type: String

  PrivateSubnet2CIDR:
    Default: 10.0.4.0/24
    Description: Please enter the IP range (CIDR notation) for the private subnet 2
    Type: String

  InstanceType:
    Type: String
    Default: t2.micro
    Description: Choose the instance type
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
  
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to use for the instance
    ConstraintDescription: must be the name of an existing EC2 KeyPair
    Default: 'mykey'
  #Description: Please enter the name of the existing EC2 KeyPair
  # Mandatory: true
  # Description: Please enter the name of the existing EC2 KeyPair

  AmazonImageID:
    Type: String
    Default: ami-0ff591da048329e00
    #ami-04a81a99f5ec58529



  DatabaseInstanceIdentifier:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Default: mydb
    Description: Instance identifier name
    MaxLength: 60
    MinLength: 1
    Type: String

  DatabaseName:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Default: applicationdb
    Description: MySQL database name
    MaxLength: 64
    MinLength: 1
    Type: String

  DatabaseUser:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Default: dbadmin
    Description: Username for MySQL database access
    MaxLength: 16
    MinLength: 1
    NoEcho: true
    Type: String

  DatabasePassword:
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Must contain only alphanumeric characters
    Default: database1407
    Description: Password for MySQL database access
    MaxLength: 41
    MinLength: 8
    NoEcho: true
    Type: String

  DatabaseBackupRetentionPeriod:
    ConstraintDescription: Database backup retention period must be between 0 and 35 days
    Default: 0
    Description: The number of days for which automatic DB snapshots are retained
    MaxValue: 35
    MinValue: 0
    Type: Number

  DatabaseAllocatedStorage:
    ConstraintDescription: Must be between 5 and 1024Gb
    Default: 20
    Description: The size of the database (Gb)
    MaxValue: 65536
    MinValue: 5
    Type: Number

  DatabaseInstanceClass:
    AllowedValues:
      - db.t1.micro
      - db.t3.micro
      - db.m1.small
      - db.m1.medium
      - db.m1.large
    ConstraintDescription: Must select a valid database instance type
    Default: db.t3.micro
    Description: The database instance type
    Type: String

  MultiAZDatabase:
    AllowedValues:
      - true
      - false
    ConstraintDescription: Must be either true or false
    Default: false
    Description: Creates a Multi-AZ MySQL Amazon RDS database instance
    Type: String 


  WebServerLaunchTemplateName:
    AllowedPattern: '[a-zA-Z0-9\(\)\.\-/_]+'
    ConstraintDescription: Must be unique to this account. Max 128 chars. No spaces or special characters like '&', '*', '@'.
    Default: wordpress-Server-Launch-Template
    Description: Name of launch template
    Type: String

Resources:
  #create vpc
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy:  default

      Tags:
        - Key: Name
          Value: demo-vpc-aq



  # create INternet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: demo-igw-aq

  # Attach gateway to vpc
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC


  # Cretae public subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: demo-public-subnet-1-aq


  # create public subnet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: demo-public-subnet-2-aq


  # cretae private subnet 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: demo-private-subnet-1-aq

 # cretae private subnet 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: demo-private-subnet-2-aq


 # create Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: demo-public-route-table-aq

  # Add a Public Route to the Route Table
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable


  # Associate Public Subnet1 with Public Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  # Associate Public Subnet2 with Public Route Table
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  
   # Allocate ELastic ip
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
      Tags:
        - Key: Name
          Value: Eip-aq

  # create natgateway in public subnet
  natgateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: Natgateway-aq

  # create private routetable
  privateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: PrivateRouteTable-aq
      VpcId: !Ref VPC



  # add a route
  privateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref privateRouteTable
      NatGatewayId: !Ref natgateway

  # associate private subnet 1  with private route table
  privateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId: !Ref PrivateSubnet1

  # associate private subnnet 2 with private routetable
  privateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId: !Ref PrivateSubnet2




  EC2Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AmazonImageID
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet2

      VpcId: !Ref VPC
      SecurityGroupIds: 
        - !Ref WebServerSecurityGroup
        # - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: wp-server-1-aq
      UserData:
        Fn::Base64: !Sub | 
          #!/bin/bash
          set -x
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install apache2 -y
          sudo systemctl status apache2 -y
          sudo systemctl start apache2
          sudo systemctl enable apache2
          sudo apt-get install php php-mysql php-gd php-cli php-common -y
          sudo apt-get install wget unzip -y
          sudo wget https://wordpress.org/latest.zip
          sudo unzip latest.zip
          sudo cp -r wordpress/* /var/www/html/
          cd /var/www/html
          sudo chown www-data:www-data -R /var/www/html/
          sudo rm -rf index.html
          sudo cp wp-config-sample.php wp-config.php
          sudo sed -i "s/database_name_here/${DatabaseName}/g" wp-config.php
          sudo sed -i "s/username_here/${DatabaseUser}/g" wp-config.php
          sudo sed -i "s/password_here/${DatabasePassword}/g" wp-config.php
          sudo sed -i "s/localhost/${DatabaseInstance.Endpoint.Address}/g" wp-config.php  
          sudo systemctl restart apache2


  EC2Instance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AmazonImageID
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet2

      VpcId: !Ref VPC
      SecurityGroupIds: 
        - !Ref WebServerSecurityGroup
        # - !Ref ALBSecurityGroup          # edit this line for checking
      Tags:
        - Key: Name
          Value: wp-server-2-aq
      UserData:
        Fn::Base64: !Sub | 
          #!/bin/bash
          set -x
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install apache2 -y
          sudo systemctl status apache2 -y
          sudo systemctl start apache2
          sudo systemctl enable apache2
          sudo apt-get install php php-mysql php-gd php-cli php-common -y
          sudo apt-get install wget unzip -y
          sudo wget https://wordpress.org/latest.zip
          sudo unzip latest.zip
          sudo cp -r wordpress/* /var/www/html/
          cd /var/www/html
          sudo chown www-data:www-data -R /var/www/html/
          sudo rm -rf index.html
          sudo cp wp-config-sample.php wp-config.php
          sudo sed -i "s/database_name_here/${DatabaseName}/g" wp-config.php
          sudo sed -i "s/username_here/${DatabaseUser}/g" wp-config.php
          sudo sed -i "s/password_here/${DatabasePassword}/g" wp-config.php
          sudo sed -i "s/localhost/${DatabaseInstance.Endpoint.Address}/g" wp-config.php  
          sudo systemctl restart apache2



# Create Security Group for the DataBase
  DataBaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: DataBase-Security-Group-aq
      VpcId: !Ref VPC

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds: 
       - !Ref PrivateSubnet1
       - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: database-subnets-aq

  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: !Ref DatabaseAllocatedStorage
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      BackupRetentionPeriod: !Ref DatabaseBackupRetentionPeriod
      DBInstanceClass: !Ref DatabaseInstanceClass
      DBInstanceIdentifier: !Ref DatabaseInstanceIdentifier
      DBName: !Ref DatabaseName
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Engine: MySQL
      EngineVersion: 8.0.35
      MasterUsername: !Ref DatabaseUser
      MasterUserPassword: !Ref DatabasePassword
      MultiAZ: !Ref MultiAZDatabase
      VPCSecurityGroups:
        - !Ref DataBaseSecurityGroup



#Create Security Group for the Web Server
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP/HTTPS access via port 80/443 locked down to the load balancer SG + SSH access via port 22 locked down SSH SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        #  SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
         # SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: WebServer-Security-Group-aq
      VpcId: !Ref VPC


  # Security Group for ALB
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow HTTP and HTTPS traffic to ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # - IpProtocol: tcp
        #   FromPort: 443
        #   ToPort: 443
        #   CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALB-Security-Group-aq


  # Create ALB
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: demo-alb-aq
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '300'
      Tags:
        - Key: Name
          Value: demo-alb-aq

  # Target Group 1 for ALB
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: demo-target-group-aq-1
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckPath: /wp-admin/install.php
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Name
          Value: demo-tg1
      # Targets:
      #   - Id: !Ref EC2Instance1  
      #     Port: 80
      #   - Id: !Ref EC2Instance2  
      #     Port: 80


  # Listener 1 for ALB
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP



  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Ref WebServerLaunchTemplateName
      LaunchTemplateData:
        ImageId: !Ref AmazonImageID
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        # Monitoring:
        #   Enabled: true
        SecurityGroupIds:
          - !Ref WebServerSecurityGroup
          # - !Ref ALBSecurityGroup
        UserData:
          Fn::Base64: !Sub | 
            #!/bin/bash
            set -x
            sudo apt-get update -y
            sudo apt-get upgrade -y
            sudo apt-get install apache2 -y
            sudo systemctl status apache2 -y
            sudo systemctl start apache2
            sudo systemctl enable apache2
            sudo apt-get install php php-mysql php-gd php-cli php-common -y
            sudo apt-get install wget unzip -y
            sudo wget https://wordpress.org/latest.zip
            sudo unzip latest.zip
            sudo cp -r wordpress/* /var/www/html/
            cd /var/www/html
            sudo chown www-data:www-data -R /var/www/html/
            sudo rm -rf index.html
            sudo cp wp-config-sample.php wp-config.php
            sudo sed -i "s/database_name_here/${DatabaseName}/g" wp-config.php
            sudo sed -i "s/username_here/${DatabaseUser}/g" wp-config.php
            sudo sed -i "s/password_here/${DatabasePassword}/g" wp-config.php
            sudo sed -i "s/localhost/${DatabaseInstance.Endpoint.Address}/g" wp-config.php  
            sudo systemctl restart apache2

  # Auto Scaling Group             # curl -X PUT !Ref WaitConditionHandle
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: LaunchTemplate 
    Properties: 
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      # LaunchTemplateSpecification:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber

      MinSize: '1'
      MaxSize: '6'
      DesiredCapacity: '1'

      TargetGroupARNs:
        - !Ref TargetGroup
        # - !Ref TargetGroup2
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300

  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 400
      ScalingAdjustment: 1


  WebServerScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 400
      ScalingAdjustment: -1


  # Security Group for Instances
  # InstanceSecurityGroup:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupDescription: Allow HTTP from ALB
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 80
  #         ToPort: 80
  #         CidrIp: 0.0.0.0/0
  #     Tags:
  #       - Key: Name
  #         Value: Instance-Security-Group-aq


# Outputs
Outputs:
  ALBEndpoint:
    Description: "The DNS name of the ALB"
    Value: !GetAtt ApplicationLoadBalancer.DNSName

# # Outputs:
  DBEndpoint:
    Description: "The connection endpoint for the RDS database"
    Value: !GetAtt DatabaseInstance.Endpoint.Address
